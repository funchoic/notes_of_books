* 第5章 環境
** 5.1 シェルスクリプトを定義すること
ファイルのはじめに書く「#!」はマジックナンバーと呼ばれている。
マジックナンバーがあると、そのファイルがインタプリタ(1行ずつ処理する)的に動作するものとして認識される。
そのあとに使用するインタプリタを指定する。
| #!/bin/sh | Bourne shell |
| #!/bin/csh | C shell |
| #!/bin/ksh | Korn shell |

** 環境変数
プロセスが作られたときに引き継がれる「名前とその値」が組になったもの。
プロセスができるときに、親の環境をコピーしてくる。
| set | 変数を表示 |
| env | 環境変数を表示 |
.bash_profileなどの起動ファイルに書き込むと、起動したときから使える。

*** 環境変数の追加、変更はexport
環境変数CFLAGSを変えたければ
: CFLAGS=-g
: export CFLAGS
とすると、変更が全体に適用される。

一部にだけ適用したい場合は、
括弧でかこむか、 同一行にセミコロンで区切らずに書く。
: (CFLAGS=-g; export CFLAGS; make)
: CFLAGS=-g make

*** 親プロセスの環境を変更する
基本的にはできない。ファイルを用いてやりとりさせる。

*** PATH変数
ディレクトリの一覧が入っており、そのディレクトリのなかにあるファイルからコマンドをさがすようになっている。
ディレクトリを探す順番は、左から。

PATHを追加するには、以下のようにする。
: PATH=$PATH:$HOME/mydir
: export PATH
また、
: PATH=$PATH:.
: export PATH
とするとカレントディレクトリのコマンドが「./」なしで呼び出せる。
しかしカレントディレクトリに悪意のあるファイルがある場合、実行してしまうので危険。

** ユーザ情報、マシン情報
whoami, logname, id, whoによって得られる。
| whoami | そのシェルスクリプトを起動させているかを調べる |
| logname | 元のログイン時の名前を▼表示 |
| id | ユーザ名、ユーザID、グループ名、グループID |
| who | システムを利用しているユーザのリストを表示 |

スーパユーザかで処理をわける。
スーパユーザかどうかの判定はユーザID(スーパユーザは0)でおこなう。

マシン名は hostname でわかる。

** シグナルの処理
*** trap
通常、プロセスはシグナルを受け取ると中断する。
しかし、trapをつかうと、シグナルを受け取ったときの処理が決められる。
: trap command_list signal_nums
で、signal_numsのシグナルを受け取ったときに、command_listを実行する。
command_listにexitがない場合は、シグナルを受け取たときに処理していたところからシェルスクリプトが再開される

| trap command_list signal_num | シグナルを受け取って処理 |
| trap '' signal_num | シグナルを無視 |
| trap signal_num | シグナルをリセット(本来の意味にもどる) |
| | |
*** kill シグナルを送る
: kill -signal_num PROCESSID
で、そのプロセスにシグナルを送ることができる。
シグナルの種類は以下。
| 0 | シェルスクリプトが終わるときに出される。trapに0を指定すると終了処理ができる。 |
| 1 | ハングアップシグナル。デーモンのリセット、X Windowのクローズなど。 |
| 2 | 割り込みシグナル。実行中の処理を中断させる。Ctrl-C,Delete。 |
| 3 | クイットシグナル。Ctrl-\。 |
| 9 | キルシグナル。プロセスの強制終了。trapがあっても処理できない。 |
| 15 | 終了シグナル。指定しなければ、このシグナルがでる。アプリケーションを終了させるときに用いる。 |
*** trapの例

