* 第1章 基本的な説明
** 1 シェルスクリプトをつくる際の基本事項
1行目に 「#! /bin/sh」を書く。

 #!に続くコマンドが読み込まれるので、まずはbshellで動くことを宣言

実行権限(x)をつける
: chmod +x file

** コメント
: # ここはコメント
: ls -l # コマンドは実行される。

** ファイル名の補完
: * # 文字列すべて
: ? # 1文字
: .* # 隠しファイル
: .? # 2文字の隠しファイル
: [xxx] #[]内にふくまれている中のどれか1文字
: [a-zA-Z] # こんなんもできる
: [!xxx] #[]内にふくまれていない、どれか1文字
これらの組み合わせでファイル名を補完できる。
隠しファイルは、頭に「.」をつけなければ認識されない。(検索から除外される)

たとえば以下のコマンドでは隠しファイルに適用されない。
: [.a]

** クォーテーション \, '', ""
文字として扱うときにつかう。
渡す引数の個数を変化させたくない場合などにつかう。
ex)
: STR =
: test "$STR" = "some chars"
上の場合だと、STRが空でも、
: test "" = "some chars"
となり、エラーが起こらない。

*** \ (エスケープキャラクタ)
*** ' ' (シングルクォート) すべてエスケープ
すべての特殊文字を、文字としてあつかえる。
*** " " (ダブル) 特定の特殊文字は使用可能
\ , $ , ` は、エスケープしない。
** バッククォート(` `) コマンド置換
: echo "Today is `date`"
この場合、dateコマンドの実行結果が代入される。
** コマンドステータス true(0), false(!0)
直前のコマンドの結果は、「$?」にはいっている。
0だとtrue、0以外だとfalseとなる。

** コマンドセパレータ ;, |, &, ||, &&
*** ; セミコロン 改行せずに1行で

*** | パイプ コマンドの結果を処理
: func1 | func2
func1の実行結果が、 func2の入力となって処理される。
: func1 > tmp
: func2 < tmp
と同じ処理。

*** & バックグラウンドで処理を実行
: func1 &
とすると、func1の実行がバックグラウンドで行われる。
並行して操作できるということ。


*** || OR演算子
: func1 || func2
func1が失敗(false)だったときに、func2が実行される。
いままでに学習したプログラムとすこし違う。
: rm file || echo "Cant rm file"
このようにもつかえる。
: if func1 || func2 ;then
:   echo "true"
: fi
*** && AND演算子
: func1 || func2
func1が成功したときに func2が実行される


** グルーピング
*** () 新しいシェルでコマンドを実行
新しいシェルは、現在の環境を引き継いでいる。

*** {} かっこ内をまとめて実行
: { func1;func2 }
: {
:   func1
:   func2
: }
のようにして実行。コマンドの結果をまとめたいときにつかう。

** 制御文 if, for, while, case

*** if
: if commands1; then
:    truefunc
: elif commands2; then
:   eltruefunc
: else
:    otherfunc
: fi
のようにつかう。
*** for
: for value in ab cd ef
: do
:   echo $1
: done
のようにつかう。適用する部分はスペースで区切る。
break, continueなどで制御可能。

*** while
: while test &a -lt 3
: do echo $a
:    a=`expr $a + 1`
: done
whileの条件が、0(true)の間はくりかえす。
*** case
: STR=abc
: case "$STR" in
:   ABC) echo "str = ABC" ;;
:   abc) echo "str = abc" ;;
: esac
** testコマンド 条件を判定
: test someexp
someexpが正しいばあいに、0を返す
: [ someexp ]
という糖衣構文もある


* 第2章シェル変数
** 変数の条件
[_a-zA-Z0-9]で構成される。
頭文字は数字以外([_a-zA-Z])。
つまり、[_a-zA-z][_a-zA-Z0-9]*が適用されるもの。

変数に代入したものは、すべて文字列として認識される。
変数への代入は、variable=valueという形で実行。
スペースは区切りとなる。つまり一行に複数代入できる。
: variable1=value1 variable2=value2 ...

** 変数の呼び出し
変数名に、$をつける。
{}で変数名を囲うこともできる。
以下のようなときに役立つ。

: valiable=10
: echo ${variable}xxx
: => 10xxx

変数の条件に合わない文字がある場合は、変数を区切るものとして処理される。
echo $variable.test.$variable/test
=> 10.test.10/test

** 値がない変数と、アンデファインド変数(undefined variables)
: variable1=
: variable2=""
:
: echo $variable1
: =>
: echo $variable2
: =>
: echo $novariable
: =>

variable1,2とnovariableは同じように見えるが、
前者は「ヌルという値が入っている変数」(アンデファインド変数)と考えられ、
後者は「値がなにも入っていない変数」と解釈される。

これは変数の場合分けのときに必要。

** 未設定の変数の扱い

*** := 値がなければ代入
: ${variable:=xxx}
とすると、variableに値がなにも入っていない場合、
:=以下の値が代入される。
=だけの場合、アンデファインド変数は代入されない。


: $ echo ${abc:=x}
: x
: $ echo $abc
: x
: $ echo ${abc:=y}
: x
: $ abc=
: $ echo ${abc=z}
:
: $ echo ${abc:=z}
: z
*** :- 値を代入せず、その値を返すだけ

: $ echo ${def:-xyz}
: xyz
: $ echo $def

書き込み禁止の変数にも使える。
ex) 位置パラメタ

*** :? メッセージを表示する

: $ echo ${ghi:?"this variable is not exist"}
: bash: ghi: this variable is not exist
: $ echo ${ghi:?}
: bash: ghi: パラメータが null または設定されていません

*** :+ 値がなければ何もしない、値があればその値を返す

: $ echo ${jkl:+zzz}
:
: $ jkl=test
: $ echo $jkl
: test
: $ echo ${jkl:+zzz}
: zzz
: $ echo $jkl
: test

** 位置パラメタ
コマンドに渡した引数
: cat a b c d e f g h i j k
この場合、
- $0 - コマンド自身(cat)
- $1 - 最初の引数(a)
- $9 - 8番目の引数(i)
- $# - 引数の個数(10)<=$0は入らない
10番目以降が欲しいときは、shiftをつかう。

すべての引数
- $* - まとめて処理を適用
- $@ - それぞれの引数に処理を適用
以下のようにすると、"$*"はひとつにまとめられ、"$@"はそれぞれダブルクォートがついているのがわかる。
: $ ./checkparameter a b c d
: =========check $* start
: a b c d
: =========check $@ start
: a b c d
: =========check "$*" size start
: 1
: =========check "$@" size start
: 4

** 書き込み禁止変数
値を代入することができない。

** その他特殊な変数
$? 直前のコマンドの実行結果
$$ 現在動作しているコマンドのプロセスID(ユニークな名前をつけたいときに)
$! バックグラウンドで走っているコマンドのプロセスID。「wait $!」でプロセスがおわるのを待ったり。
$- フラグの一覧を表示

** コマンド行上で変数を設定
下の2つのコマンドはおなじ。
: CFLAGS=-g make
: (CFLAGS=-g; export CFLAGS; make)

ほかのプロセスでも使えるようにしているが、
他のコマンドには影響を与えない。


* 第3章 シェル関数、組み込みコマンド
** 3.1 シェル関数
関数名を定義し、コマンド処理を定義するだけで、シェル関数を定義できる。
: function_name(){
:   command1
:   command2
: }
定義した関数は、そのシェル内で有効になる。

関数の戻値は、「関数の中で最後に実行されたコマンドの実行終了ステータス」。
変えたい場合は
: return backnumber
とすれば、指定した値が戻値となる。


シェルスクリプトの中のコマンドは、そのシェルスクリプトの元で操作される。
これはシェルスクリプトを起動したシェルとは異なる。

*** シェルの移動とか
: function_name
と呼びだすだけだと、そのシェルスクリプトの元で処理される。

リダイレクションをつかう場合はサブシェルを開いて、そこで処理される。

*** 引数(位置バラメタ)に関する注意
シェルスクリプトを1つつくると、そこにある変数は1つのテーブルにまとめられる。
変数がかぶらないように、頭に「_」をつけるなどの工夫を。

*** シェルスクリプト内の関数をカレントシェルで実行するには
: . script
というように、実行ファイルノ前に「. 」を入れる。

** 組込みコマンド
: man sh
で利用しているシェルのマニュアルが見れる。
*** ヌルコマンド(:)
真を返すコマンド。
なにもしたくないときや、あるパラメタだけの判定をしたいときに使う。
1.なにもしたくないとき
: if return_bool
: then
:   :
: else
:   command
: fi

2.あるパラメタだけの判定
: if : return_bool
: then
:   ...
: fi
return_boolが真だと真になりifがとおり、return_boolが偽だと偽になる。

*** ドットコマンド 指定されたファイルを現在のシェルで読み込む
ファイルの指定がなければ、PATHにあるディレクトリのファイルから探してくる
*** break
*** cd +directory
*** continue
*** echo
*** eval +str
*** exec +command
現行のシェルプロセスを置き換え、引数のコマンドを実行させる。
もとのシェルに戻らない。
*** exit
*** export +variable
指定した変数を、それ以降に起動された他のコマンド、シェルから利用できるようになる。
*** pwd
*** read +variable
キーボードからの入力をvariableに格納する。
*** readonly
*** return
*** set
+と-で、オプションをonにしたりoffにしたり。
オプション一覧
| -I | ^DによりEOFを無視                              |
| -i | 対話的に動作                                   |
| -n | コマンドを読み取りのみ、実行しない             |
| -s | コマンドを標準入力から読むん                   |
| -v | 入力されたコマンドを標準エラーに出力           |
| -x | コマンド実行前に、コマンドを標準エラーに▼出力 |

また、位置バラメタに値をセットできる。
: set a b c d
: echo $1 $2 $3 #=> a b c
*** shift
*** test +
条件を判定し、真偽値を返す。
オプションは
: man test
で確認できる。
*** trap +action +signal ..
catchのように、指定したシグナルを受け取ると、
actionを実行する。
*** type
シェル内での取り扱いかを知る。
*** umask +mask
作成するファイルの権限を、「777 - $mask」にして作成する。
(r -4, w- 2, x - 1)
*** unset
指定した変数関数を消去
*** wait PROCESSID
PROCESSIDに指定したプロセスが終わるまで待つ。


* 第4章 ディレクションによるファイル操作

** 4.1 ファイルディスクリプタ プロセスと使用するファイルをむすびつける。
予約されているものは3種類あり、0番から2番はそれぞれ以下のようになっている。

| ファイルディスクリプタ | 意味                                         |
|                      0 | 標準入力(指定しなければキーボードからの入力) |
|                      1 | 標準出力(指定しなければ端末への出力)         |
|                      2 | 標準エラー(指定しなければ端末への出力)       |
** リダイレクション
ファイルディスクリプタは指定すると入出力先を変えることができる。
これをリダイレクションという。
リダイレクト記号は「> (出力)」「< (入力)」をつかう。

: echo abcd > filename
: cat filename #=>abcd
ファイルを上書きしたくなければ(ファイルに文字列を追加したければ)、「>>」をつかう。

「>」は指定しなければ「1> filename」(標準出力の先をfilenameにリダイレクションする)という意味である。
エラーの出力先を変えたければ「2> filename」とする。

「<」は「0< filename」の略。

*** まとめてリダイレクト
: cat abc xxx > filename 2>&1
とすると、2を1にリダイレクトしたあと、1をfilenameにリダイレクトしていることになる。
つまり、1と2をまとめてリダイレクトさせている。

** リダイレクションの記述法
| >file       | fileに標準出力を上書き                           |
| >>file      | fileに標準出力を追加                             |
| >&m         | 1(標準出力)をm番目のファイルディスクリプタに書く |
| ?&-         | 標準出力をクローズ                               |
| <file       | fileから標準入力を読み込み                       |
| <&m         | mというファイルディスクリプタから読み込む        |
| <&-         | 標準入力をクローズ                               |
| <<words     | ヒアドキュメントから読み込む                     |
| tee -a file | 標準出力を出し、かつfileに出力を追加                             |
これらのコマンドは左から処理されていく。
: cat abc xxx > filename 2>&1
を
: cat abc xxx 2>&1 > filename
とすると、まずエラーが標準出力として端末にでる。
そして、標準出力だけがfilenameにいって、エラーは書き込まれない。

*** パイプで入出力をつなぐ
: command1 | command2
は
: command1 > file
: command2 < file
とおなじ。command1の出力をcommand2が読み込むこととなる。

** execとリダイレクション
exec 現在のシェルプロセスを置き換えて、新しいコマンドを実行させる。
: exec >/dev/null
/dev/nullはゴミ箱。以上のようにすると、シェル上での、すべての標準出力が捨てられてしまう。

** ファイルからの読み込みとread
readは改行コードまでを対象としている。
readを複数行のファイルにたいして実行しようとおもうと、

: while read LINE
: do
:  ....
: done <filename
となる。これはfilenameの1行をLINEへ代入していることがわかる。
ただし、この場合、whileの中で定義した変数、関数は利用できないこととなる。
解決するには
: exec filename
: while read LINE
: do ...
: done
となる。

キーボードからの入力もつかえるようにするには、予約されていないファイルディスクリプタを利用する方法がある。
: exec 3<&0 <file
: # fileを標準入力から3番のファイルディスクリプタとして設定
: while read LINE
: do ...
: done
: exec 0 <&3 3<&-

** リダイレクションのクローズ
コマンドの出力を捨てたければ
command >/dev/null
のほうが安全。


** あたらしくなにもはいってないファイルをつくる
: > filename
: : > filename

** ヒアドキュメント
: command << END
:   this is a $VARIABLE
: EMD

で囲まれた部分。
エスケープは「\」
: command << \END
:   this is a $VARIABLE
: END
: command << END
:   this is a \$VARIABLE
: END

*** vi以外の標準エディタed
: ed file <<-!
: g/^/m0
: w
: q
: !
!で囲まれた部分がヒアドキュメント。
wで上書き保存、qでedコマンドを終了。

g/^/で行頭をさがして、その行をm0で0行目に移動させている。
結果として、すべての行が逆順になる。

** リダイレクションの注意
コマンドへのリダイレクションは、コマンドごとにリダイレクト先を指定しなければならない。
: command1 2> Error | command2 2> Error
標準入力、標準出力は、同じファイルにリダイレクトさせない。


* 第5章 環境
** 5.1 シェルスクリプトを定義すること
ファイルのはじめに書く「#!」はマジックナンバーと呼ばれている。
マジックナンバーがあると、そのファイルがインタプリタ(1行ずつ処理する)的に動作するものとして認識される。
そのあとに使用するインタプリタを指定する。
| #!/bin/sh | Bourne shell |
| #!/bin/csh | C shell |
| #!/bin/ksh | Korn shell |

** 環境変数
プロセスが作られたときに引き継がれる「名前とその値」が組になったもの。
プロセスができるときに、親の環境をコピーしてくる。
| set | 変数を表示 |
| env | 環境変数を表示 |
.bash_profileなどの起動ファイルに書き込むと、起動したときから使える。

*** 環境変数の追加、変更はexport
環境変数CFLAGSを変えたければ
: CFLAGS=-g
: export CFLAGS
とすると、変更が全体に適用される。

一部にだけ適用したい場合は、
括弧でかこむか、 同一行にセミコロンで区切らずに書く。
: (CFLAGS=-g; export CFLAGS; make)
: CFLAGS=-g make

*** 親プロセスの環境を変更する
基本的にはできない。ファイルを用いてやりとりさせる。

*** PATH変数
ディレクトリの一覧が入っており、そのディレクトリのなかにあるファイルからコマンドをさがすようになっている。
ディレクトリを探す順番は、左から。

PATHを追加するには、以下のようにする。
: PATH=$PATH:$HOME/mydir
: export PATH
また、
: PATH=$PATH:.
: export PATH
とするとカレントディレクトリのコマンドが「./」なしで呼び出せる。
しかしカレントディレクトリに悪意のあるファイルがある場合、実行してしまうので危険。

** ユーザ情報、マシン情報
whoami, logname, id, whoによって得られる。
| whoami | そのシェルスクリプトを起動させているかを調べる |
| logname | 元のログイン時の名前を▼表示 |
| id | ユーザ名、ユーザID、グループ名、グループID |
| who | システムを利用しているユーザのリストを表示 |

スーパユーザかで処理をわける。
スーパユーザかどうかの判定はユーザID(スーパユーザは0)でおこなう。

マシン名は hostname でわかる。

** シグナルの処理
*** trap
通常、プロセスはシグナルを受け取ると中断する。
しかし、trapをつかうと、シグナルを受け取ったときの処理が決められる。
: trap command_list signal_nums
で、signal_numsのシグナルを受け取ったときに、command_listを実行する。
command_listにexitがない場合は、シグナルを受け取たときに処理していたところからシェルスクリプトが再開される

| trap command_list signal_num | シグナルを受け取って処理 |
| trap '' signal_num | シグナルを無視 |
| trap signal_num | シグナルをリセット(本来の意味にもどる) |
| | |
*** kill シグナルを送る
: kill -signal_num PROCESSID
で、そのプロセスにシグナルを送ることができる。
シグナルの種類は以下。
| 0 | シェルスクリプトが終わるときに出される。trapに0を指定すると終了処理ができる。 |
| 1 | ハングアップシグナル。デーモンのリセット、X Windowのクローズなど。 |
| 2 | 割り込みシグナル。実行中の処理を中断させる。Ctrl-C,Delete。 |
| 3 | クイットシグナル。Ctrl-\。 |
| 9 | キルシグナル。プロセスの強制終了。trapがあっても処理できない。 |
| 15 | 終了シグナル。指定しなければ、このシグナルがでる。アプリケーションを終了させるときに用いる。 |
*** trapの例

* 第6章 コマンド行の解析、処理
** コマンド行とは
セパレータで分けられた1つのコマンド。

コマンドは以下の規則でならべる
: command -[options] [parameters]

これ以降 command [-abcf] [-v value] [-x value]
のように書く。valueには必ず値がひつよう。

引数に「-」が入る場合、[--]をつかう。
: command -[options] -- -someparam

** オプション処理
getoptsコマンド

変数の初期化
: FLAG=FALSE
: VALUE=
: OPT=
オプションとして「f」をとり、そのあとに[v]というparameterがはいる。
値を必要とするものは、そのあとに(:)をつかう。
: while getopts fv: OPT
: do
:   case $OPT in
fオプションがあればFLAGを真にする
:     f) FLAG=TRUE
:        ;;
変数の名前を設定
v:OPTとしているので、$OPTARGに引数が代入される。
:     v) VALUE=$OPTARG
:        ;;
それ以外のオプションがあればエラーを出す。
:     \?) echo "Usage: $0 [-f] [-v value]" 1>&2
:         exit 1
:         ;;
:   esac
: done
:
: shift 'expr $OPTIND - 1'

追記
command [-abc] [-v value] [-x value]のときは
: getopts abcv:x: OPT
と書く。



* 第7章 フィルタの使用法
** フィルタとはコマンドの一種
標準入力からデータを受け取って、そのデータを加工して、標準出力に書き出す。
データの受け渡しには、パイプライン(｜)をつかう。
このように
: cat file |
:     filter1 |
:     filter2 |
:     while read LINE
:     do
:         ...
:     done
複数のファイルをあつかう。
: cat file1 file2 file3 | filter1 | filter2

** sed コマンド
オプション
*** -e 'command'
コマンドの実行(edit)
: sed -e "s/ABC/DEF/" somefile
sはsubstitute(置換)で、ABCにマッチする最初の文字列をDEFに変えるというもの。
: cat somefile | sed -e "s/ABC/DEF/" > result
なども書ける。

: "s/ABC/DEF/g"
とすれば、ABCにマッチするすべての文字列をDEFに変える。

*** -n
明示的に p としない限り表示しない。
: sed -n '3p' file
とすると、fileの3行目を表示する。

*** -f filename
filename のファイルに含まれているコマンドを実行する。

** sedをパイプでつなぐ
: cat file |
:     sed -e "s/ABC/DEF/g" |
:     sed -e "s/HIJ/DEF/g" |
:     while read LINE
:     do
:         ...
:     done
以下のようにも書ける。

: cat file |
:     sed -e "s/ABC/DEF/g" \
:         -e "s/HIJ/DEF/g" |
:     while read LINE
:     do
:         ...
:     done
** デリミタの変更
: "s/ABC/DEF/g"
の/部分は、ただの慣習であり、なんの文字がきても動作する。
: "s%ABC%DEF%g"
でも、
: "sxABCxDEFxg"
でも動作する。
** 正規表現
: . 	改行文字以外の任意の1文字
: * 	直前の1文字の0回以上の繰り返しに一致。直前の文字は正規表現でも構わない
: ^ 	行の先頭
: $ 	行の末尾
: [ ] 	かっこ内の任意の1文字に一致。ハイフン（-）で範囲指定もできる
: [^ ] 	かっこ内の任意の1文字に不一致。ハイフン（-）で範囲指定もできる
: \+ 	直前の文字の1個以上の繰り返しに一致
: \? 	直前の文字の0または1文字に一致
: \{n\} 	直前の文字のn個の繰り返しに一致
: \{n,\} 	直前の文字のn個以上の繰り返しに一致
: \{,m\} 	直前の文字のm個以下の繰り返しに一致
: \{n,m\} 	直前の文字のn個以上，m個以下の繰り返しに一致
: パターン1\|パターン2 	パターン1またはパターン2のいずれかに一致
: \(パターン\) 	パターンをグループ化する。マッチした内容は\1や\2として利用できる
: \ 	正規表現に使われる記号を普通の文字として扱う
** 条件にあった部分を抜き出す
sedの置換では置換条件で「\(...\)」にくくった文字列を置き換え文字として利用できる。
その際，始めに現われた\(...\)が「\1」，次に現われた\(...\)が「\2」に代入される。

** awkコマンド
** trコマンド 大文字、小文字の入れ替え
: cat file | tr '[A-Z]' '[a-z]' >lowerfile


* 第8章数値、文字列操作
** 数値の計算
*** 整数の計算 expr
: expr 3 + 5
: expr 3 \** 5

*** 数値の比較 test
equal
: test int1 -eq int2
not equal
: test int1 -ne int2
less than
: test int1 -lt int2
less than or equal
: test int1 -le int2
greater than
: test int1 -gt int2
greater than or equal
: test int1 -ge int2

*** 不動小数点を含む計算 bc & scale
bc     小数点の結果を表示
scale  小数点以下の桁数を決める

: echo "scale=3; 10 / 3" | bc
: echo "scale=5; 3.33 ** 3.123" | bc

*** カラムに対する計算

** 文字列の操作
*** フィルタを使った文字列処理
[[file:ch7.org][7章]]を参考に。
: STR="abc def ghi"
: STR=`echo "$STR" | sed -e "s/def/xyz/g"`
: echo $STR  #=> abc xyz ghi
バッククォートをつかうと、その部分に、実行結果が代入される。
これを利用すると、同じ変数に再代入できる。
*** 文字列の連結
: STR1=abc
: STR2=xyz
: VAR=$STR1$STR2
: echo $VAR #=> abcxyz
: echo ${STR1}xyz #=> abcxyz
*** 余計なホワイトスペースの削除
echo $VARとすると、ホワイトスペースを削除できる。
"$VAR"にすると、処理されないので注意
: STR="  abc     def xyz "
: echo "$STR" #=>   abc     def xyz
: STR=`echo $STR`
: echo "$STR" #=> abc def xyz

*** 文字列の長さ expr VAR : '.*'
: expr "string" : '.*'
exprの引数に:があると、「先頭から何文字までが等しいか」を返す。
*** 文字列のなかの文字列 grep
grepコマンドは、「ある文字列がその中に含まれていれば、その行を書き出す」
: ps ax | grep httpd
*** 文字列の中の一部を切り出す expr VAR : "regexp\(regexp\)regexp"
: STR=abcdefghijklmn
: expr $STR : "a.*\(d.*h\).*" #=> defgh
正規表現に適用される箇所を抜き出す。

以下の表現は同じ
: STR=`echo "$STR"|sed -e 's/^..//'`
: STR=`expr "$STR" : "..\(.*\)"`

*** 文字列の最初の文字だけを大文字にする exprとtrの併用
2つの処理にわける
:  STR=abcdefghijklmn
:  echo "$STR" | tr [a-z] [A-Z] #=> ABCDEFGHIJKLMN
:  FCHAR=`expr "$STR" : '\(.\).*'`
:  REMAIN=`expr "$STR" : '.\(.*\)'`
:  FCHAR=`echo "$FCHAR"|tr [a-z] [A-Z]`
:  echo $FCHAR$REMAIN  #=> Abcdefghijklmn
:  STR=$FCHAR$REMAIN
:  echo $STR  #=> Abcdefghijklmn

** 文字列の取り扱い
シェルやコマンドがどのように、ある部分が1個の文字列だと判断しているか。
*** IFS変数
Internal Field Separatorの略。
言葉のデリミタ(区切り文字)としてつかわれる。
デフォルトでは、空白文字とタブ、改行の3つがセットされている。

IFS変数にセットすれば、区切り文字として利用することができる。
しかし、別の値をセットした場合、目的の処理が終わったら元の値に戻しておくこと。
*** readコマンド

