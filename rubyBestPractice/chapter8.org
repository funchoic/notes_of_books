* 第8章 上手なプロジェクトメンテナンス
プロジェクトから数ヶ月はなれてしまうと、自分の書いたコードでさえも、メンテナンスが困難になる。
他人の書いたコードならなおさら。

ソフトウェアの可読性を上げるには、コードの品質自体を上げるよりも、プロジェクトを慣習に従った構成にすること。
APIドキュメントの生成、プロジェクト管理ユーテリティ(RDoc,RubyGems,Rakeなど)。
* うまく整理されたプロジェクトを調査する(Haml)
** rdocを調べる
.rvm/gems/$VERSION/gems/haml-3.1.4で、
: rake --tasks
にrdocがあることを確認。
: rake doc
すると、最終的に、rdoc/ディレクトリに、htmlドキュメントを掃き出してくれる。
 [[file:///home/tomoya/.rvm/gems/ruby-1.9.2-p290/doc/haml-3.1.4/rdoc/Haml/Engine.html][ここ]]のドキュメントを読むと、 このプロジェクトが、 lib/モジュール名/クラス名.rb となっているのがわかる。
** テストファイルを調べる
[[file:/home/tomoya/.rvm/gems/ruby-1.9.2-p290/gems/haml-3.1.4/test/haml][ここ]] に統合テストがあるので読むと、render()メソッドでだいたい何をやっているかがわかる。
Hamlで、なにかを変更したときは、変更しおわったあとに、
: rake test
をおこない、エラーがでなければ、ひとまずはうまく動いていることがわかる。
もうすこし調べるとHaml::EngineのコンストラクタとHaml::Engin#to_htmlに依存していることがわかるので、hamlを調べるなら、ここを掘り下げる。
** rakeファイルを調べる
: rake install
の実装をしらべる。Rakefileを読むと
: desc "Install Haml as a gem. Use SUDO=1 to install with sudo."
: task :install => [:package] do
:   gem  = RUBY_PLATFORM =~ /java/  ? 'jgem' : 'gem'
:   sh %{#{'sudo ' if ENV["SUDO"]}#{gem} install --no-ri pkg/haml-#{get_version}}
: end
の部分でrake installが実装されているのがわかる。
現在のソースをもとに、Hamlをgemとしてインストールするタスク。

こうすると、Rubyライブラリと同じパッケージングシステムを使って、ローカルで変更を試すことが可能。
** VERSIONを調べる
VERSIONには現在のバージョンのみが書かれている。
こうすることで、Rakefileが特定のバージョン番号に依存しなくなる。
メンテナンスが容易になる。

** まとめ
hamlは慣習に一貫して従っているが、何かを新たに発明したわけではない。

* 知っておくべき慣習
rubyは自由形式であり、ほとんど好きなようにファイルを構成して構わないが、
その構成を標準化しておくと役立つ。

** READMEに入れるもの
** ライブラリのレイアウト
ライブラリファイルは通常 lib/ディレクトリに置かれる。
このディレクトリは、1つのファイルと1つのサブディレクトリだけにするべき。
- lib/xxx.rbファイルと、lib/xxx/ディレクトリだけ。
lib/xxx.rbファイルは、依存関係のあるライブラリや必要なサポートライブラリをロードするための出発としての役割。

