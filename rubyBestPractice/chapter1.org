* テストでコードを駆動する
TDDについて
** テスティングフレームワーク
標準ライブラリとして minitest/unit を提供。
これは test/unit と互換性がある。

既存のテスティングフレームワークのほとんどが Test::Unit をもとにつくられている。
RSpecはTest::Unitをもとにしていないが、ここで書く考えかたは応用可能。

** テストできるよう設計
「レッド、グリーン、リファクタリング」するときには、
各フェーズでどれだけ作業をする必要があるかを考えなければならない。

たとえば1つの大きな機能を、1つのテストで片付けると、コードをきれいにするのが難しい。
小さな機能を、小さなテストで確かめていくと、きれいにするのが楽。

TDDの本質は、コードをもっと小さな、扱いやすい塊に分割すること。

** テスティングの基礎
*** 商店をしぼったテスト
テストのかたまりを小さくるす。
*** 例外をテスト
rspecだと、
: lambda{ x == 1}.should raise_error
*** テストケース全体を同時に実行
テストを複数のファイルに分割するときには、コードを変更するたびに、テストケース全体を実行する。
rakeやwatchrなどをつかう。
*** テストを書くのが高くつくリソースがあるばあい(ネットワーク、DB連携など)
モックオブジェクトをつかって、外部リソースへの依存を回避する。

** 高度なテストテクニック モック&スタブ
*** モックとスタブをつかう
ユーザ入力、DBとのやりとり、ネットワーク、ファイルIOなどをテストしたく、
かつ、 動作にのみ関心がある場合には、モックとスタブが役立つ。

外部リソースと依存関係をなくすと、はやくなり、かつ、テストケースが分離できるようになる。
*** スタブとは
[[file:ch1/questioner_spec.rb]] で、@qの特異メソッドとしてaskを定義している部分。
*** IOをつかう場合は
StringIOをつかってテストする。
*** 複雑な出力をテストする
信頼できるライブラリをつかうと、テストしたい機能にしぼったテストができる。
- rssとnokogiriの例
*** まとめ
- モック、スタブは、適切なやりとりや動作を検証しつつ、テストから外部への依存関係をなくす
- スタブは、ある機能を事前に用意された結果を返すように置き換えて、他コードのテストを簡単にする
- モックは、テストのために外部リソースの変わりになるオブジェクトを作るために使われる。
- モックオブジェクトには期待される応答が用意され、テストが実行されたとき、その応答が実際に行われたかを検証。
- 複雑な出力をテストするときは、出力フォーマットをパースするツールをつかってテストを書く。
- データのパースに労力がかかるなら、期待される出力をファイルに格納し、必要時ファイルを読み込み、diffでチェックする
- Nokogiriは、たいていのxmlフォーマットに対応している
** 整理しておく

*** ライブラリファイルにテストファイルを組込む
なるたけ組込まない。
*** テストヘルパー
繰り返される情報は、test/test_helpers.rbを作成し、全体の設定をすべて書いておく。
個々のテストでは、
: require File.dirname(__FILE__) + '/test_helpers.rb'
として、test/test_helpers.rbを読み込む。
